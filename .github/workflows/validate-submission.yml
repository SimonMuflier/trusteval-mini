name: validate-submission

on:
  pull_request:
    paths:
      - "scores.csv"
      - "submissions/**/report.json"
      - ".github/workflows/validate-submission.yml"

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Find report.json
        id: find
        shell: bash
        run: |
          set -e
          REPORTS=$(ls submissions/*/report.json 2>/dev/null || true)
          if [ -z "$REPORTS" ]; then
            echo "No report.json found under submissions/*/"
            exit 1
          fi
          REPORT=$(echo "$REPORTS" | head -n1)
          echo "REPORT=$REPORT" >> "$GITHUB_OUTPUT"
          echo "Found $REPORT"

      - name: Compare CSV row to report.json (basic)
        shell: bash
        env:
          REPORT: ${{ steps.find.outputs.REPORT }}
        run: |
          python3 - <<'PY'
          import csv, json, os, sys
          report_path = os.environ["REPORT"]
          with open(report_path, "r") as f:
            rep = json.load(f)
          run_name = rep.get("run_name") or rep.get("runName") or ""
          if not run_name:
            sys.exit("report.json missing run_name")

          with open("scores.csv", "r") as f:
            rows = [r for r in csv.reader(f) if any(c.strip() for c in r)]
          if len(rows) < 2:
            sys.exit("scores.csv must contain header and at least one row")

          header, last = rows[0], rows[-1]
          try:
            idx = header.index("run_name")
          except ValueError:
            sys.exit("scores.csv header must include run_name")

          if last[idx].strip() != run_name:
            sys.exit(f"run_name mismatch: CSV '{last[idx]}' vs report.json '{run_name}'")

          print("CSV basic check OK")
          PY

      - name: Enforce STRICT provenance when used
        shell: bash
        env:
          REPORT: ${{ steps.find.outputs.REPORT }}
        run: |
          python3 - <<'PY'
          import json, os, sys
          p = os.environ["REPORT"]
          with open(p,"r") as f:
            rep = json.load(f)
          prov = (rep.get("provenance") or "").upper()
          if prov == "STRICT" and not rep.get("signature_verified"):
            sys.exit("STRICT run must have signature_verified=true in report.json")
          print("Provenance check OK")
          PY
